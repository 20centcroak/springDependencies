package fr.croak.spring.dependencies.template.elementarycomponents;

import org.springframework.beans.factory.annotation.Autowired;

import fr.croak.spring.dependencies.template.toplevelcomponents.ModelDescriptorService;

/**
 * AsService defines implementations of methods defined by the AsContextInterface. 
 * AsService uses I (Input), S (Settings), C(Context) and R(Result). 
 * The input, settings, context and result types should be defined by typing this class. 
 *
 * @param <I>		Input for a given calculation
 * @param <S>	Settings to initialize the Service
 * @param <C>	Context autogenerated based on Settings and used to defined the global behaviour of the service.
 * @param <R>	Result to be updated by the computation method
 */
public abstract class TemplateService<I, S extends Settings, C extends Context<S>, R> implements TemplateServiceInterface{
	
	@Autowired
	protected ModelDescriptorService modelDescriptorService;
	
	protected abstract Context<S>createMyContext(S settings) ;
	
	@SuppressWarnings("unchecked")
	@Override
	public Context<S> createContext(Settings settings){
		return createMyContext((S)settings);
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public Status updateResult(Object input, ContextInterface asContext, Object result) {
		return updateMyResult((I)input, (C)asContext, (R)result);
	}
	protected abstract Status updateMyResult(I input, C asContext, R result);
	
}
